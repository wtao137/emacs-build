# This is a basic workflow to help you get started with Actions

name: build

# Controls when the action will run.
on:
  # Triggers the workflow on push or pull request events but only for the main branch
  # JJGR: Change back to main from cicd
  # tag:
  # Allows you to run this workflow manually from the Actions tab
  schedule:
    - cron: "0 0 1 * *" # monthly
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    env:
      MSYS2_DIR: C:\msys64

    # Matrix strategy from
    # https://github.com/msys2/MINGW-packages/blob/master/.github/workflows/main.yml
    strategy:
      matrix:
        include: [{ msystem: MINGW64, arch: x86_64 }]

    defaults:
      run:
        shell: powershell

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      - name: See free space
        run: Get-PSDrive

      # This is the shortest job, but in this case it pulls all MSYS/MINGW64
      - name: Clone Emacs
        id: clone_repo
        run: .\emacs-build.cmd --clone

      - name: See free space
        run: Get-PSDrive

      # Now download dependencies
      # - name: Collect dependencies
      #   run: .\emacs-build.cmd --deps

      # - name: See free space
      #   run: powershell -noprofile -Command Get-PSDrive

      - name: Build Emacs
        run: .\emacs-build.cmd --slim --nativecomp --no-compress --with-rsvg --pdf-tools --hunspell --build 

      - name: See free space
        run: Get-PSDrive

      # Full emacs
      - name: Pack full emacs
        run: .\emacs-build.cmd --slim --nativecomp --no-compress --with-rsvg --pdf-tools --hunspell --pack-all

      - name: See free space
        run: Get-PSDrive

      # Upload everything
      - name: Upload binaries
        uses: actions/upload-artifact@v2
        with:
          name: ${{ matrix.msystem }}-packages
          path: zips/*

      # Create release
      - name: Create Release
        id: create_release
        uses: ncipollo/release-action@v1
        with:
          tag: v0.${{ steps.clone_repo.outputs.EMACS_PKG_VERSION }}
          name: emacs_0.${{ steps.clone_repo.outputs.EMACS_PKG_VERSION }}
          draft: false
          prerelease: false
          artifactErrorsFailBuild: true
          artifacts: |
            zips/emacs-master-${{ matrix.arch }}-full.zip
          artifactContentType: application/zip
          token: ${{ secrets.GITHUB_TOKEN }}
